server:
  port: 8088
spring:
  shardingsphere:
    # 配置数据源
    datasource:
      names: m0,m1,m2
      m0:
        # 配置数据源具体数据
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user_db?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
        username: root
        password: 12345678
      m1:
        # 配置数据源具体数据
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
        username: root
        password: 12345678
      m2:
        # 配置数据源具体数据
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
        username: root
        password: 12345678
    rules:
      sharding:
        sharding-algorithms:
          # 算法名用-连接，不要用下划线_连接
          tablesource-day-class-based:
            type: CLASS_BASED
            props:
              strategy: standard
              # 自定义标准分配算法
              algorithmClassName: com.cas.sharding.DayStrategyShardingAlgorithm
          tablesource-month-class-based:
            type: CLASS_BASED
            props:
              strategy: standard
              # 自定义标准分配算法
              algorithmClassName: com.cas.sharding.MonthStrategyShardingAlgorithm
          course-table:
            type: INLINE
            props:
              algorithm-expression: course_$->{cid % 2 + 1}
          course-database:
            type: INLINE
            props:
              algorithm-expression: m$->{user_id % 2 + 1}
        tables:
          t_user:
            actual-data-nodes: m$->{0}.t_user
            key-generator:
              column: user_id
              type: SNOWFLAKE
            table-strategy:
              inline:
                sharding-column: user_id
                shardingAlgorithmName: t_user
          course:
            # 指定course表分布情况，配置表在哪个数据库里面，表名称都是什么
            actual-data-nodes: m$->{1..2}.course_$->{1..2}
            tableStrategy:
              standard:
                sharding-column: cid
                shardingAlgorithmName: course-table
            database-strategy:
              standard:
                sharding-column: user_id
                shardingAlgorithmName: course-database
            keyGenerateStrategy:
              column: cid
              keyGeneratorName: SNOWFLAKE
          t_log_day:
            # 按日期分片，测试功能使用
            actual-data-nodes: m$->{0}.t_log_${2022}$->{(11..12).collect{t ->t.toString().padLeft(2,'0')}}$->{(1..31).collect{d -> d.toString().padLeft(2,'0')}}
            tableStrategy:
              standard:
                sharding-column: request_time
                shardingAlgorithmName: tablesource-day-class-based
          t_log_month:
            # 按月分片，普遍使用
            actual-data-nodes: m$->{0}.t_log_${2022..2027}$->{(1..12).collect{t ->t.toString().padLeft(2,'0')}}
            tableStrategy:
              standard:
                sharding-column: request_time
                shardingAlgorithmName: tablesource-month-class-based

    props:
      sql-show: true

